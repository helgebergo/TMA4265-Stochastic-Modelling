plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 1), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
points(theta,p)
# Calculating the treshold
treshold = 0.30
p <- pnorm(treshold, mean = lower, sd = diag(Var), lower.tail = TRUE)
plot(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 1), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
# Plot with error and conditional values
#pdf("plot.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.0, 1.3),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,1.2,legend = c("Model","Bounds", "Reality"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
legend(0.35,1.2,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
# Calculating the treshold
treshold = 0.30
p <- pnorm(treshold, mean = lower, sd = diag(Var), lower.tail = TRUE)
plot(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 1), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
p <- pnorm(treshold, mean = lower, sd = diag(Var), lower.tail = TRUE)
plot(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 1), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
p <- pnorm(treshold-theta, mean = lower, sd = diag(Var), lower.tail = TRUE)
plot(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 1), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
?pnorm
# Calculating the treshold
treshold = 0.30
#p <- pnorm(treshold, mean = lower, sd = diag(Var), lower.tail = TRUE)
p <- pnorm((treshold - Y)/sqrt(diag(Var)), lower.tail = TRUE)
plot(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 1), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
points(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.4), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
points(theta,p)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
plot(diag(Var))
diag(Var)
# Calculate the expected value
Y <- mu + Sigma_AB %*% solve(Sigma_B) %*% (Y_conditional - theta_conditional)
# Calculating 90% confidence interval
Var <- Sigma_A - Sigma_AB %*% solve(Sigma_B) %*% t(Sigma_AB)
upper <- Y + z*sqrt(diag(Var))
lower <- Y - z*sqrt(diag(Var))
upper
mu
theta
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
Y
Y
plot(Y)
mu
mu[11]
Y[11]
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
(Y_conditional - theta_conditional)
# Plot with error and conditional values
#pdf("plot.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.0, 1.3),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
#lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,1.2,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
diag(Var)
diag(Var)[11]
diag(Var)[diag(Var) < 0] <- 0 # Remove negative values
diag(Var)
diag(Var)[11]
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
# Calculating the treshold
treshold = 0.30
#p <- pnorm(treshold, mean = lower, sd = diag(Var), lower.tail = TRUE)
p <- pnorm((treshold - Y)/sqrt(diag(Var)), lower.tail = TRUE)
#p <- pnorm(treshold, mean = lower, sd = diag(Var), lower.tail = TRUE)
p <- pnorm((treshold - Y)/sqrt(diag(Var)), lower.tail = FALSE)
plot(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.4), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
points(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.4), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
points(theta,p)
#p <- pnorm(treshold, mean = lower, sd = diag(Var), lower.tail = TRUE)
p <- pnorm((treshold - Y)/sqrt(diag(Var)), lower.tail = TRUE)
plot(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.4), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = ('p(x[A] < 0.3 | x[B])'), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 | x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 \| x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 ,'|', x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 '|' x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 '|' x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 ,'|' x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 ',|' x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 '|', x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 ,'|', x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 ,'|', x[B])))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 .'|', x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x'[A]' < 0.3 '|', x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 |, x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 |, x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 | x[B])))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste(p(x[A] < 0.3 '|' x[B])))), cex.lab = 1.5, cex.axis = 1.5)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3| x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
#points(theta,p)
dev.off()
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
#pdf("treshold.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R')
View(p)
View(H_B)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
# Plot with error and conditional values
#pdf("plot6.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.0, 1.1),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
#lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,1.2,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
# Plot with error and conditional values
#pdf("plot6.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.0, 1.3),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
#lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,1.2,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
pdf("treshold5.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
dev.off()
#pdf("treshold5.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
which.max(p)
which.max(p[0.3:0.5])
p[0.3,0.5]
p[0.3:0.5]
p[0.3 0.5]
p[3,5]
p[3:5]
p[3:5]
p
p[10:p[tail()]]
p[10:50]
best_guess <- which.max(p[10:50])
best_guess
best_guess <- theta(which.max(p[10:50]))
best_guess <- theta[which.max(p[10:50])]
best_guess <- theta[which.max(p)]
best_guess <- theta[which.max(p)]
best_guess <- theta[which.max(p)]
p
max(p)
?find
?`index
index <- match(best_guess,p)
index <- match(max(p),p)
index
index <- match(max(p),p)
index <- match(max(p[5:50]),p)
index
thisshit <- theta(index)
thisshit <- theta[index]
thisshit <- theta[match(max(p[5:50]),p)]
best_guess <- theta[match(max(p[5:50]),p)]
print(best_guess)
print("Max value: ")
println(best_guess)
print(best_guess)
print("Max value: ")
print(best_guess)
theta <- [theta, theta]
theta <- (theta, theta)
theta <- c(theta, theta)
theta
theta_conditional <- c(theta_conditional, 0.33)
theta_conditional <- c(theta_conditional, 0.33)
theta_conditional <- c(theta_conditional, 0.33)
theta_conditional <- c(theta_conditional, 0.33)
theta_conditional <- c(theta_conditional, 0.33)
theta_conditional <- c(theta_conditional, 0.33)
theta_conditional <- c(theta_conditional, 0.33)
theta_conditional <- c(theta_conditional, 0.33)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
# Extra measurement
theta_conditional <- c(theta_conditional, 0.33) # mu_B with extra conditional parameter
Y_conditional <- c(Y_conditional, 0.40) # x_B
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
# Conditional values
theta_conditional = c(0.3, 0.35, 0.39, 0.41, 0.45) # mu_B
Y_conditional = c(0.5, 0.32, 0.40, 0.35, 0.60) # x_B
# Extra measurement
theta_conditional <- c(theta_conditional, 0.33) # mu_B with extra conditional parameter
theta <- setdiff(theta, theta_conditional); # remove the steps where we have a conditional value
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
# Build distance matrices H
ones_A <- as.matrix(rep(1.0, length(theta)));
H_A <- abs(theta %*% t(ones_A) - ones_A %*% t(theta));
# Conditional values
theta_conditional = c(0.3, 0.35, 0.39, 0.41, 0.45) # mu_B
Y_conditional = c(0.5, 0.32, 0.40, 0.35, 0.60) # x_B
# Extra measurement:
theta_conditional <- c(theta_conditional, 0.33) # mu_B with extra conditional parameter
Y_conditional <- c(Y_conditional, 0.40) # x_B
# Build distance matrices H
ones_A <- as.matrix(rep(1.0, length(theta)));
H_A <- abs(theta %*% t(ones_A) - ones_A %*% t(theta));
ones_B <- as.matrix(rep(1.0, length(theta_conditional)));
H_B <- abs(theta_conditional %*% t(ones_B) - ones_B %*% t(theta_conditional));
H_AB <- matrix(0, nrow = length(theta), ncol = length(theta_conditional))
H_AB <- abs(theta %*% t(ones_B) - ones_A %*% t(theta_conditional));
# Build distance matrices H
ones_A <- as.matrix(rep(1.0, length(theta)));
# Build distance matrices H
ones_A <- as.matrix(rep(1.0, length(theta)));
H_A <- abs(theta %*% t(ones_A) - ones_A %*% t(theta));
ones_B <- as.matrix(rep(1.0, length(theta_conditional)));
H_B <- abs(theta_conditional %*% t(ones_B) - ones_B %*% t(theta_conditional));
H_AB <- matrix(0, nrow = length(theta), ncol = length(theta_conditional))
H_AB <- abs(theta %*% t(ones_B) - ones_A %*% t(theta_conditional));
# Build covariance matrices Sigma
Sigma_A  <- sigma * (1 + phi_m * H_A)  * exp(-phi_m * H_A)
Sigma_B  <- sigma * (1 + phi_m * H_B)  * exp(-phi_m * H_B)
Sigma_AB <- sigma * (1 + phi_m * H_AB) * exp(-phi_m * H_AB)
# Calculate the expected value
Y <- theta + Sigma_AB %*% solve(Sigma_B) %*% (Y_conditional - theta_conditional)
# Calculating 90% confidence interval
Var <- Sigma_A - Sigma_AB %*% solve(Sigma_B) %*% t(Sigma_AB)
diag(Var)[diag(Var) < 0] <- 0 # Remove negative values from floating point errors
z <- 1.64
upper <- Y + z*sqrt(diag(Var))
lower <- Y - z*sqrt(diag(Var))
# Plot with error and conditional values
#pdf("plot6.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.0, 1.3),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
#lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
# Plot with error and conditional values
#pdf("plot6.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.0, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
#lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
# Plot with error and conditional values
#pdf("plot6.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.2, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
#lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,1.2,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
# Calculating the treshold
treshold = 0.30
legend(0.35,0.9,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
# Plot with error and conditional values
#pdf("plot6.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.2, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
#lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,0.9,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
lines(c(0.25,0.5),c(0.3,0.3),col = "blue", lty = 5) # 0.3 line
# Plot with error and conditional values
pdf("plot6.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.2, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,0.9,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
dev.off()
# Calculating the treshold
treshold = 0.30
p <- pnorm((treshold - Y)/sqrt(diag(Var)), lower.tail = TRUE)
#pdf("treshold6.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.3), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
#pdf("treshold6.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.2), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
pdf("treshold6.pdf")
plot(NULL, NULL, xlim = c(0.25,0.50), ylim = c(0.0, 0.2), xlab = "Theta",
ylab = (expression(paste("p(x"[A],"<0.3|x"[B],")"))), cex.lab = 1.5, cex.axis = 1.5)
lines(theta,p)
dev.off()
best_guess <- theta[match(max(p[5:50]),p)]
print("Max value: ")
print(best_guess)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
source('~/Dropbox/NTNU/9. semester - Høst 2019/Stokastisk Modellering - TMA4265/R/Project/TMA4265-Stochastic-Modelling/Project 2/Project_2_task_2.R', echo=TRUE)
# Calculate the expected value
Y <- theta + Sigma_AB %*% solve(Sigma_B) %*% (Y_conditional - theta_conditional)
# Calculating 90% confidence interval
Var <- Sigma_A - Sigma_AB %*% solve(Sigma_B) %*% t(Sigma_AB)
diag(Var)[diag(Var) < 0] <- 0 # Remove negative values from floating point errors
z <- 1.64
upper <- Y + z*sqrt(diag(Var))
lower <- Y - z*sqrt(diag(Var))
# Plot with error and conditional values
#pdf("plot5.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.2, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,0.9,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
# Plot with error and conditional values
#pdf("plot5.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.2, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
points(theta_conditional,Y_conditional,col = "red", pch = 19)
legend(0.35,0.9,legend = c("Model","Bounds", "Measurements"),
col = c("black","black","red"),cex = 0.8, lty = c(1,2,NA), pch = c(NA,NA,19))
gc()
## Problem 2 - Calibrating Climate Models
rm(list = ls()) # clear environment and variables
gc()
## Problem 2 - Calibrating Climate Models
rm(list = ls()) # clear environment and variables
# Given values
theta <- seq(0.25, 0.50, by=0.005)# mu_A
sigma <- 0.5^2 # variance squared
phi_m <- 15 # Matern type correlation function parameter
# Conditional values
theta_conditional = c(0.3, 0.35, 0.39, 0.41, 0.45) # mu_B
Y_conditional = c(0.5, 0.32, 0.40, 0.35, 0.60) # x_B
# Build distance matrices H
ones_A <- as.matrix(rep(1.0, length(theta)));
H_A <- abs(theta %*% t(ones_A) - ones_A %*% t(theta));
ones_B <- as.matrix(rep(1.0, length(theta_conditional)));
H_B <- abs(theta_conditional %*% t(ones_B) - ones_B %*% t(theta_conditional));
H_AB <- matrix(0, nrow = length(theta), ncol = length(theta_conditional))
H_AB <- abs(theta %*% t(ones_B) - ones_A %*% t(theta_conditional));
# Build covariance matrices Sigma
Sigma_A  <- sigma * (1 + phi_m * H_A)  * exp(-phi_m * H_A)
Sigma_B  <- sigma * (1 + phi_m * H_B)  * exp(-phi_m * H_B)
Sigma_AB <- sigma * (1 + phi_m * H_AB) * exp(-phi_m * H_AB)
# Calculate the expected value
Y <- theta + Sigma_AB %*% solve(Sigma_B) %*% (Y_conditional - theta_conditional)
# Calculating 90% confidence interval
Var <- Sigma_A - Sigma_AB %*% solve(Sigma_B) %*% t(Sigma_AB)
diag(Var)[diag(Var) < 0] <- 0 # Remove negative values from floating point errors
z <- 1.64
upper <- Y + z*sqrt(diag(Var))
lower <- Y - z*sqrt(diag(Var))
# Plot with error and conditional values
#pdf("plot5.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.2, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
# Build distance matrices H
ones_A <- as.matrix(rep(1.0, length(theta)));
H_A <- abs(theta %*% t(ones_A) - ones_A %*% t(theta));
ones_B <- as.matrix(rep(1.0, length(theta_conditional)));
H_B <- abs(theta_conditional %*% t(ones_B) - ones_B %*% t(theta_conditional));
H_AB <- matrix(0, nrow = length(theta), ncol = length(theta_conditional))
H_AB <- abs(theta %*% t(ones_B) - ones_A %*% t(theta_conditional));
# Build covariance matrices Sigma
Sigma_A  <- sigma * (1 + phi_m * H_A)  * exp(-phi_m * H_A)
Sigma_B  <- sigma * (1 + phi_m * H_B)  * exp(-phi_m * H_B)
Sigma_AB <- sigma * (1 + phi_m * H_AB) * exp(-phi_m * H_AB)
# Calculate the expected value
Y <- theta + Sigma_AB %*% solve(Sigma_B) %*% (Y_conditional - theta_conditional)
# Calculating 90% confidence interval
Var <- Sigma_A - Sigma_AB %*% solve(Sigma_B) %*% t(Sigma_AB)
diag(Var)[diag(Var) < 0] <- 0 # Remove negative values from floating point errors
z <- 1.64
upper <- Y + z*sqrt(diag(Var))
lower <- Y - z*sqrt(diag(Var))
# Plot with error and conditional values
#pdf("plot5.pdf")
plot(NULL,NULL, xlim = c(0.25,0.5), ylim = c(0.2, 1.0),
xlab = expression(paste(theta)), ylab = expression(paste(y(theta))), cex.lab = 1.5)
lines(theta,Y,col="black")
lines(theta,upper,lty=2)
lines(theta,lower,lty=2)
